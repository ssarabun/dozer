<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2005-2017 Dozer Project

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>Custom Mappings via API</title>
    <author email="buzdin@gmail.com">Dmitry Buzdin</author>
  </properties>
  <head>
    <title/>
    <meta http-equiv="CACHE-CONTROL" name="CACHE-CONTROL" content="NO-CACHE"/>
    <meta http-equiv="PRAGMA" name="PRAGMA" content="NO-CACHE"/>
    <meta http-equiv="EXPIRES" content="0"/>
  </head>
  <body>
    <section name="API Mappings">
        <p>Since version 5.3 Dozer offers two ways for specifying explicit mappings. First is Xml-based and has
        been there for years. Second is API-based and it is brand new. On the high level both approaches are
        functionally equivalent, however there are major differences in using those described further on.</p>

        <subsection name="XML Mapping Flaws">
        <p>
        XML-based approach is stable and is used in many production projects. However, it imposes several limitations.
        </p>
        <ul>
            <li>
                First, and most important, is that it can not be dynamically generated. All XML mappings should be present on
            Dozer start-up and can not be modified afterwards. There are tricky ways, when you can generate and put
            mappings to the file system by your own templating engine, but this approach is not supported by Dozer itself.
                By generating custom mappings you are able to automate repetitive chunks of low-level Dozer language.
            </li>
            <li>
                Second problem is that you are forced to duplicate all of your Bean class names in Xml mappings. This
                leads to lots of typing and copy-paste programming. This can be partly compensated by use of
                Expression Language inside Xml, but it is not solving all of the problems.
            </li>
            <li>
                Refactoring support is limited as IDE should keep track of class names in Xml files and change them
                when you rename or move the referenced class. Auto-completion support is also not available in all IDEs.
            </li>
        </ul>

        </subsection>

        <subsection name="API Mappings">

             <p>
                API mappings are intended to solve all of the mentioned problems. To preserve backwards compatibility
                 API mappings can be combined with existing Xml mappings. In fact some parts of the configuration
                 (e.g. global configuration block) are only possible to express in Xml format.
             </p>

            <p>
                To get a feeling of what are these mappings take a look at the following code example.
            </p>

            <source>
              <![CDATA[
import static org.dozer.loader.api.FieldsMappingOptions.*;
import static org.dozer.loader.api.TypeMappingOptions.*;

...

BeanMappingBuilder builder = new BeanMappingBuilder() {
      protected void configure() {
        mapping(Bean.class, Bean.class,
                TypeMappingOptions.oneWay(),
                mapId("A"),
                mapNull(true)
        )
                .exclude("excluded")
                .fields("src", "dest",
                        copyByReference(),
                        collectionStrategy(true, 
                            RelationshipType.NON_CUMULATIVE),
                        hintA(String.class),
                        hintB(Integer.class),
                        FieldsMappingOptions.oneWay(),
                        useMapId("A"),
                        customConverterId("id")
                )
                .fields("src", "dest",
                    customConverter("org.dozer.CustomConverter")
                );
      }
    };
              ]]>
            </source>

            <p>Constructed builder object should be then passed to DozerBeanMapper instance.
                It is possible to add multiple Builder classes.</p>

      <source>
        <![CDATA[
DozerBeanMapper mapper = new DozerBeanMapper();
mapper.addMapping(builder);
        ]]>
      </source>
          <p>
            Don't forget to make a static import of FieldsMappingOptions and TypeMappingOptions classes.
          </p>
            <p>
                That's it.
            </p>
        </subsection>

    </section>
  </body>
</document>
