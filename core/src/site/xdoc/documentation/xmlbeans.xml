<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2005-2017 Dozer Project

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>XMLBeans with dozer</title>
    <author email="fgarsombke@yahoo.com">Franz Garsombke</author>
  </properties>
  <head>
    <title/>
    <meta http-equiv="CACHE-CONTROL" name="CACHE-CONTROL" content="NO-CACHE"/>
    <meta http-equiv="PRAGMA" name="PRAGMA" content="NO-CACHE"/>
    <meta http-equiv="EXPIRES" content="0"/>
  </head>
  <body>
    <section name="3rd Party Object Factories">
      <p>
        Dozer supports mapping of plain Java objects to frameworks that require instantiation of objects via certain
        convention of calling factory methods. To reproduce the expected behavior custom bean factories should be used.
      </p>

        <subsection name="Mapping JAXB Objects">
          <p>
            Dozer has support for mapping POJOs to JAXB objects. Use the JAXBBeanFactory for any JAXB objects you
            want create.
          </p>

        <source>
<![CDATA[
<mapping>
  <class-a>org.dozer.vo.TestObject</class-a>
  <class-b bean-factory="org.dozer.factory.JAXBBeanFactory">
    org.dozer.vo.jaxb.employee.Employee
  </class-b>

  <field>
    <a>name</a>
    <b>firstName</b>
  </field>

  <field>
    <a>street</a>
    <b>address.street</b>
  </field>

</mapping> ]]></source>
        </subsection>

      <subsection name="Mapping XMLBeans">
        <p>
          Dozer has support for mapping POJOs to XMLBeans objects. Use the XMLBeanFactory for any XMLBeans you want
          created. This factory will also be used for mapping any fields that need to be instantiated in a deep
          mapping that are not regular POJOs but are XMLBeans.
        </p>
        <source>
          <![CDATA[ 
<mapping wildcard="false">
  <class-a>org.dozer.vo.TestObject</class-a>
  <class-b bean-factory="org.dozer.factory.XMLBeanFactory">
    org.dozer.vo.GetWeatherByZipCodeDocument
  </class-b>

  <field>
    <a>one</a>
    <b>GetWeatherByZipCode.zipCode</b>
  </field>    

</mapping>           
         ]]>
        </source>
        <p>The unit test:</p>
        <source>
          <![CDATA[ 
// Map from TestObject to XMLBeans
TestObject to = new TestObject();
to.setOne("one");
GetWeatherByZipCodeDocument doc = 
    mapper.map(to, GetWeatherByZipCodeDocument.class);
assertEquals(to.getOne(), 
    doc.getGetWeatherByZipCode().getZipCode());

// Map from XMLBeans to TestObject
GetWeatherByZipCodeDocument res = 
    GetWeatherByZipCodeDocument.Factory.newInstance();
GetWeatherByZipCode zipCode = 
    res.addNewGetWeatherByZipCode();
zipCode.setZipCode("one");
TestObject to2 = mapper.map(res, TestObject.class);
assertEquals(res.getGetWeatherByZipCode().getZipCode(), 
    to2.getOne());
        ]]>
        </source>
      </subsection>

    </section>
  </body>
</document>