<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2005-2017 Dozer Project

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>Copying By Object Reference</title>
    <author email="fgarsombke@yahoo.com">Franz Garsombke</author>
  </properties>
  <head>
    <title/>
    <meta http-equiv="CACHE-CONTROL" name="CACHE-CONTROL" content="NO-CACHE"/>
    <meta http-equiv="PRAGMA" name="PRAGMA" content="NO-CACHE"/>
    <meta http-equiv="EXPIRES" content="0"/>
  </head>
  <body>
    <section name="Copying By Object Reference">
      <p>
        Dozer supports copying an object by reference. No conversion/transformation is done for such objects.
        This approach allows to decrease a number of object allocations, but is applicable only when Java Beans are
        to be thrown away (Garbage Collected) after transformation. This approach is generally recommended for
        performance
        tuning of the mapping process when possible.
        Make sure that both object types are the same or you will run into casting problems. The default value is
        'false'.
      </p>
      <source>
        <![CDATA[ 
<field copy-by-reference="true">
  <a>copyByReference</a>
  <b>copyByReferencePrime</b>
</field>               
            ]]>
      </source>
      <p>
        This is also supported at the class level. Just define the classes you want to be copied by reference in
        the configuration block.
      </p>
      <source>
        <![CDATA[ 
<configuration>
  ...
   <copy-by-references>
     <copy-by-reference>
       org.dozer.vo.NoExtendBaseObjectGlobalCopyByReference
     </copy-by-reference>
   </copy-by-references>
</configuration>
  ]]>
      </source>

      <p>
        On the class level wildcard expressions are allowed. Copy by reference is applied via mask, which can inlcude
        multiple wildcard (*) characters.
      </p>
      <source>
        <![CDATA[
<configuration>
  ...
   <copy-by-references>
     <copy-by-reference>
       org.dozer.vo.*
     </copy-by-reference>
     <copy-by-reference>
       org.dozer.*.vo.*DTO
     </copy-by-reference>
   </copy-by-references>
</configuration>
  ]]>
      </source>
      <subsection name="Referencing self (this) in a field mapping">
        <p>
          Using a field mapping it is possible to map where N == 0 (self, or this). In the following example
          SimpleAccount is mapped to Address. It is also mapped to Account. Suppose Address was an attribute on
          Account. How could we map the values on SimpleAccount to that property? The answer is to use the keyword
          (this) to denote using the class being mapped as the source object.
        </p>
        <source>
          <![CDATA[ 
<mapping>
  <classa>org.dozer.vo.self.SimpleAccount</classa>
  <classb>org.dozer.vo.self.Account</classb>
  <field>
    <a>this</a>
    <b>address</b>
  </field>    
</mapping>

<mapping>
  <classa>org.dozer.vo.self.SimpleAccount</classa>
  <classb>org.dozer.vo.self.Address</classb>

  <field>
    <a>streetName</a>
    <b>street</b>
  </field>
</mapping>  
            ]]>
        </source>
      </subsection>
    </section>
  </body>
</document>