<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2005-2017 Dozer Project

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>Collection and Array Mapping</title>
    <author email="fgarsombke@yahoo.com">Franz Garsombke</author>
  </properties>
  <head>
    <title/>
    <meta http-equiv="CACHE-CONTROL" name="CACHE-CONTROL" content="NO-CACHE"/>
    <meta http-equiv="PRAGMA" name="PRAGMA" content="NO-CACHE"/>
    <meta http-equiv="EXPIRES" content="0"/>
  </head>
  <body>
    <section name="Collection and Array Mapping">
      <p>
        Dozer automatically maps between collection types and automatically performs any type conversion. Each
        element in the source collection is mapped to an element in the dest object. Hints are used to specify what
        type of objects are created in the destination collection. The following collection mapping is
        automatically handled by Dozer: (These are all bi-directional)
      </p>
      <ul>
        <li>List to List</li>
        <li>List to Array</li>
        <li>Array to Array</li>
        <li>Set to Set</li>
        <li>Set to Array</li>
        <li>Set to List</li>
      </ul>
      <subsection name="Using Hints for Collection Mapping">
        <p>
          Hints are not required if you are using JDK 1.5 Generics or Arrays because the types can be autodetected
          by Dozer. But if you are not using generics or Arrays, to convert a Collection/Array to a
          Collection/Array with different type objects you can specify a Hint to let Dozer know what type of
          objects you want created in the destination list. If a Hint is not specified for the destination field,
          then the destination Collection will be populated with objects that are the same type as the elements in
          the src Collection.
        </p>
        <br/>
        <source>
          <![CDATA[
<!-- converting TheFirstSubClass List to 
     TheFirstSubClassPrime List --> 
<field>
  <a>hintList</a> 
  <b>hintList</b> 
  <b-hint>org.dozer.vo.TheFirstSubClassPrime</b-hint> 
</field>    
            ]]>
        </source>
        <p>
          Below is a summary of the mapping logic used when mapping Arrays, Sets, and Lists. This gives a breakdown
          of what happens when hints are or are not used.
        </p>
        <ul>
          <li>List to List</li>
          <li>
            <ul>
              <li>Dest Hint req'd: NO</li>
              <li>Dest Hint allowed: YES</li>
              <li>If no dest hint specified: Dest list will contain the same data types in the source</li>
              <li>If hint is speficied: Dest list will contain objects that match dest hint(s) type</li>
            </ul>
          </li>
        </ul>
        <ul>
          <li>Array to List</li>
          <li>
            <ul>
              <li>Dest Hint req'd: NO</li>
              <li>Dest Hint allowed: YES</li>
              <li>If no dest hint specified: Dest list will contain the same data types in the source</li>
              <li>If hint is speficied: Dest list will contain objects that match dest hint(s) type</li>
            </ul>
          </li>
        </ul>
        <ul>
          <li>List to Array</li>
          <li>
            <ul>
              <li>Dest Hint req'd: NO</li>
              <li>Dest Hint allowed: YES</li>
              <li>If no dest hint specified: Dest array will contain data types defined by the array</li>
              <li>
                If hint is speficied: Dest list will contain objects that match dest hint(s) type (only if Object
                Array)
              </li>
            </ul>
          </li>
        </ul>
        <ul>
          <li>Array to Array</li>
          <li>
            <ul>
              <li>Dest Hint req'd: NO</li>
              <li>Dest Hint allowed: YES</li>
              <li>If no dest hint specified: Dest array will contain data types defined by the array</li>
              <li>
                If hint is speficied: Dest list will contain objects that match dest hint(s) type (only if Object
                Array)
              </li>
            </ul>
          </li>
        </ul>
        <ul>
          <li>Set to Set</li>
          <li>
            <ul>
              <li>Dest Hint req'd: NO</li>
              <li>Dest Hint allowed: YES</li>
              <li>If no dest hint specified: Dest list will contain the same data types in the source</li>
              <li>If hint is speficied: Dest list will contain objects that match dest hint(s) type</li>
            </ul>
          </li>
        </ul>
        <ul>
          <li>Array to Set</li>
          <li>
            <ul>
              <li>Dest Hint req'd: NO</li>
              <li>Dest Hint allowed: YES</li>
              <li>If no dest hint specified: Dest list will contain the same data types in the source</li>
              <li>If hint is speficied: Dest list will contain objects that match dest hint(s) type</li>
            </ul>
          </li>
        </ul>
        <ul>
          <li>Set to Array</li>
          <li>
            <ul>
              <li>Dest Hint req'd: NO</li>
              <li>Dest Hint allowed: YES</li>
              <li>If no dest hint specified: Dest array will contain data types defined by the array</li>
              <li>
                If hint is speficied: Dest list will contain objects that match dest hint(s) type (only if Object
                Array)
              </li>
            </ul>
          </li>
        </ul>
        <ul>
          <li>List to Set</li>
          <li>
            <ul>
              <li>Dest Hint req'd: NO</li>
              <li>Dest Hint allowed: YES</li>
              <li>If no dest hint specified: Dest list will contain the same data types in the source</li>
              <li>If hint is speficied: Dest list will contain objects that match dest hint(s) type</li>
            </ul>
          </li>
        </ul>
        <ul>
          <li>Set to List</li>
          <li>
            <ul>
              <li>Dest Hint req'd: NO</li>
              <li>Dest Hint allowed: YES</li>
              <li>If no dest hint specified: Dest list will contain the same data types in the source</li>
              <li>If hint is speficied: Dest list will contain objects that match dest hint(s) type</li>
            </ul>
          </li>
        </ul>
      </subsection>
      <subsection name="Using JDK 1.5 Generics for Collection Mapping">
        <p>
          Hints are not required when JDK 1.5 Generics are used. To convert a Collection/Array to a
          Collection/Array with different type objects dozer can determine parameterized types at runtime.
        </p>
        <source>
          <![CDATA[ 
public class UserGroup {

  private Set<User> users;

  public Set<User> getUsers() {
    return users;
  }

  public void setUsers(Set<User> aUsers) {
    users = aUsers;
  }

}
public class UserGroupPrime {

  private List<UserPrime> users;

  public List<UserPrime> getUsers() {
    return users;
  }

  public void setUsers(List<UserPrime> aUsers) {
    users = aUsers;
  }

}
            ]]>
        </source>
      </subsection>

      <subsection name="Object Array to List (bi-directional)">
        <p>
          When converting an Object array to a List, by default the destination List will contain the same data
          type as the source Array.
        </p>
        <source>
          <![CDATA[
<!-- changing an Integer [] to List and back again -->
<field>
  <a>arrayForLists</a>
  <b>listForArray</b>
</field>    
            ]]>
        </source>
        <p>
          Use a hint for data type conversion. Because a hint is specified, the destination List will contain
          String elements instead of Integers.
        </p>
        <source>
          <![CDATA[
<!-- changing an Integer [] to List and back again -->
<field>
  <a>arrayForLists</a>
  <b>listForArray</b>
  <b-hint>java.lang.String</b-hint> 
</field>    
            ]]>
        </source>
      </subsection>
      <subsection name="Primitive Array to Primitive Array (bi-directional)">
        <p>
          When converting an Object array to an Array, by default the destination Array will contain the same data
          type as the source Array.
        </p>
        <source>
          <![CDATA[
<!-- converting int[] to int [] by name only --> 
<field>
  <a>anArray</a> 
  <b>theMappedArray</b>
</field>      
            ]]>
        </source>
      </subsection>
      <subsection name="Cumulative vs. Non-Cumulative List Mapping (bi-directional)">
        <p>
          If you are mapping to a Class which has already been initialized, dozer will either &apos;add&apos; or
          &apos;update&apos; objects to your List. If your List or Set already has objects in it dozer checks the
          mapped List, Set, or Array and calls the contains() method to determine if it needs to &apos;add&apos; or
          &apos;update&apos;. This is determined using the relationship-type attribute on the field tag. The
          default is &apos;cumulative&apos;. relationship-type can be specifed at the field mapping, class mapping,
          or global configuration level.
        </p>
        <br/>
        <p>global configuration level....</p>
        <source>
          <![CDATA[ 
<mappings>
  <configuration>
     <relationship-type>non-cumulative</relationship-type>
  </configuration>
</mappings>
            ]]>
        </source>
        <p>class mapping level....</p>
        <source>
          <![CDATA[ 
<mappings>
  <mapping relationship-type="non-cumulative">
    <class-a>org.dozer.vo.TestObject</class-a>
    <class-b>org.dozer.vo.TestObjectPrime</class-b>
    <field>
      <a>someList</a>
      <b>someList</b>
    </field>    
  </mapping> 
</mappings>            ]]>
        </source>
        <p>field mapping level....</p>
        <source>
          <![CDATA[
<!-- objects will always be added to an existing List --> 
<field relationship-type="cumulative">
  <a>hintList</a>
  <b>hintList</b> 
  <a-hint>org.dozer.vo.TheFirstSubClass</a-hint> 
  <b-hint>org.dozer.vo.TheFirstSubClassPrime</b-hint> 
</field>    

<!-- objects will updated if already exist in List, 
     added if they are not present -->
<field relationship-type="non-cumulative">
  <a>unequalNamedList</a> 
  <b>theMappedUnequallyNamedList</b> 
</field>    
            ]]>
        </source>

        <p><b>Note:</b> if you do not define custom <i>equals()</i> and <i>hashCode()</i> methods
            non-cumulative option will not function 
            properly, as Dozer will fail to determine object equality and will rely on JDK generated object Ids.
            In default case two instances of a class are always treated as different and update will not occure.
        </p>

      </subsection>
      <subsection name="Removing Orphans">
        <p>
          Orphans are elements which exist in a destination collection that did not exist within the source
          collection.

          Dozer will remove orphans by calling the &apos;remove&apos; method on actual orphans of the underlying
          destination collection; it will not clear all. To determine elements which are orphans dozer uses the
          contains() method to check if the results contains orphans. The default setting value is false.
        </p>
        <source>
          <![CDATA[
<!-- orphan objects will always be removed from an existing 
     destination List --> 
<field remove-orphans="true">
  <a>srcList</a> 
  <b>destList</b>  
</field>    
            ]]>
        </source>
      </subsection>

    </section>
  </body>
</document>