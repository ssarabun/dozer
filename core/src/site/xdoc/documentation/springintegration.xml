<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2005-2017 Dozer Project

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>Spring Framework Integration</title>
    <author email="buzdin@gmail.com">Dmitry Buzdin</author>
  </properties>
  <head>
    <title/>
    <meta http-equiv="CACHE-CONTROL" name="CACHE-CONTROL" content="NO-CACHE"/>
    <meta http-equiv="PRAGMA" name="PRAGMA" content="NO-CACHE"/>
    <meta http-equiv="EXPIRES" content="0"/>
  </head>
  <body>

    <section name="Spring Framework Integration">
      <p>
        Since version 5.5.0 Spring integration comes within additional module <i>dozer-spring</i>.
      </p>
          <p>
            Add the DozerBeanMapperFactoryBean to your Spring configuration file. The mappingFiles property is where
            you should specify any custom dozer mapping files that you have created. This list can be empty if you
            don't have any custom mappings. It is also possible to set custom event listeners and bean factories.
          </p>
        <p>
            Note that this Factory Bean supports Spring Resources, which means that you could load mapping Xml files
            by classpath mask for example.
        </p>

        <source>
  <![CDATA[  <bean class="org.dozer.spring.DozerBeanMapperFactoryBean">
        <property name="mappingFiles" 
                  value="classpath*:/*mapping.xml"/>
        <property name="customConverters">
            <list>
                <bean class=
                      "org.dozer.converters.CustomConverter"/>      
            </list>
        </property>
        <property name="eventListeners">
            <list>
                <bean class="org.dozer.listeners.EventListener"/>
            </list>
        </property>
        <property name="factories">
            <map>
                <entry key="id" value-ref="bean-factory-ref"/>
            </map>
        </property>
    </bean>]]>
            </source>

          <p>
            <b>IMPORTANT:</b>
            You shoud define the Dozer mapper bean is defined as <b>singleton="true"</b>.
            You should configure the Mapper instance(s) this way so that you do not have to reload and reinitialize
            the mapping files for each individual mapping during the lifecycle of your app. Reinitializing the
            mapping files for each mapping would be inefficent and unnecessary. The DozerBeanMapper class is
            thread safe.
          </p>
          <p>
            If you want to avoid clashing of mapping definitions for different functionality it is possible to
            define own DozerBeanMapper instance for each such use case.
          </p>
          <br/>
        <p>
            A simpler way of registering mapper instance is without wrapping factory bean.
        </p>
<source>
            <![CDATA[
<bean id="org.dozer.Mapper" class="org.dozer.DozerBeanMapper">
  <property name="mappingFiles">
    <list>
      <value>dozer-global-configuration.xml</value>
      <value>dozer-bean-mappings.xml</value>
      <value>more-dozer-bean-mappings.xml</value>
    </list>
  </property>
</bean>
          ]]>
</source>
          <br/>
          <p>Using Spring to retrieve the Dozer Mapper......</p>
          <source>
            <![CDATA[
  Mapper mapper = yourSpringBeanFactory.getBean("mapperBeanName");
  DestinationObject destObject = 
      mapper.map(sourceObject, DestinationObject.class);
            ]]>
          </source>

    </section>
  </body>
</document>