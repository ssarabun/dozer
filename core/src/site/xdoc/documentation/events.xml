<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2005-2017 Dozer Project

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>Event Listening</title>
    <author email="fgarsombke@yahoo.com">Franz Garsombke</author>
  </properties>
  <head>
    <title/>
    <meta http-equiv="CACHE-CONTROL" name="CACHE-CONTROL" content="NO-CACHE"/>
    <meta http-equiv="PRAGMA" name="PRAGMA" content="NO-CACHE"/>
    <meta http-equiv="EXPIRES" content="0"/>
  </head>
  <body>
    <section name="Event Listening">
      <p>
        By implementing the DozerEventListener interface dozer allows you to listen to 4 different events:
      </p>
      <ul>
        <li>mappingStarted</li>
        <li>mappingFinished</li>
        <li>preWritingDestinationValue</li>
        <li>postWritingDestinationValue</li>
      </ul>
      <p>
        A DozerEvent object is passed into these callback methods which stores information about the ClassMap,
        FieldMap, Source object, destination object, and destination value. This will allow you to extend dozer and
        manipulate mapped objects at run-time. The interface is shown below:
      </p>
      <br/>
      <source>
        <![CDATA[ 
public interface DozerEventListener {
  public void mappingStarted(DozerEvent event);
  public void preWritingDestinationValue(DozerEvent event);
  public void postWritingDestinationValue(DozerEvent event);
  public void mappingFinished(DozerEvent event);
}        
        ]]>
      </source>
      <br/>
      <p>
        The listeners that you create can be injected to the DozerBeanMapper using an IOC like Spring or set
        directly on your DozerBeanMapper instance by using the setEventListeners() method. Below is an example
        using Spring to inject an event listener:
      </p>
      <source>
        <![CDATA[ 
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN"
 "http://www.springframework.org/dtd/spring-beans.dtd">
          
<beans default-lazy-init="false">
          
 <bean id="EventMapper" class="org.dozer.DozerBeanMapper">
  <property name="mappingFiles">
   <list>
    <value>dozerBeanMapping.xml</value>
   </list>
  </property>
  <property name="eventListeners">
   <list>
    <ref bean="eventTestListener"/>
   </list>
  </property>
 </bean>
          
 <bean id="eventTestListener" 
       class="org.dozer.event.EventTestListener"/>
            
</beans>
       ]]>
      </source>
    </section>
  </body>
</document>