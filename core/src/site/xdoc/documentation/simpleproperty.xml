<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2005-2017 Dozer Project

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>basic property mapping</title>
    <author email="fgarsombke@yahoo.com">Franz Garsombke</author>
  </properties>
  <head>
    <title/>
    <meta http-equiv="CACHE-CONTROL" name="CACHE-CONTROL" content="NO-CACHE"/>
    <meta http-equiv="PRAGMA" name="PRAGMA" content="NO-CACHE"/>
    <meta http-equiv="EXPIRES" content="0"/>
  </head>
  <body>
    <section name="Basic Property Mapping">
      <subsection name="Implicit Property Mapping (bi-directional)">
        <p>Matching field names are automatically handled by Dozer.</p>
        <p>
          <b>Properties that are of the same name do not need to be specified in the mapping xml file.</b>
        </p>
        <p></p>
      </subsection>
      <subsection name="Simple Mappings (bi-directional)">
        <p>
          We will start off simple. If you have two properties with different names they can be mapped as such:
        </p>
        <source>
          <![CDATA[ 
<field>
  <a>one</a>
  <b>onePrime</b>
</field>
            ]]>
        </source>
      </subsection>
      <subsection name="Data type conversion">
        <p>
          Data type coversion is performed automatically by the Dozer mapping engine. Currently, Dozer supports the
          following types of conversions: (these are all bi-directional)
        </p>
        <ul>
          <li>Primitive to Primitive Wrapper</li>
          <li>Primitive to Custom Wrapper</li>
          <li>Primitive Wrapper to Primitive Wrapper</li>
          <li>Primitive to Primitive</li>
          <li>Complex Type to Complex Type</li>
          <li>String to Primitive</li>
          <li>String to Primitive Wrapper</li>
          <li>String to Complex Type if the Complex Type contains a String constructor</li>
          <li>String to Map</li>
          <li>Collection to Collection</li>
          <li>Collection to Array</li>
          <li>Map to Complex Type</li>
          <li>Map to Custom Map Type</li>
          <li>Enum to Enum</li>
          <li>
            Each of these can be mapped to one another: java.util.Date, java.sql.Date, java.sql.Time,
            java.sql.Timestamp, java.util.Calendar, java.util.GregorianCalendar
          </li>
          <li>String to any of the supported Date/Calendar Objects.</li>
          <li>
            Objects containing a toString() method that produces a long representing time in (ms) to any supported
            Date/Calendar object.
          </li>
        </ul>
      </subsection>
      <subsection name="Recursive Mapping (bi-directional)">
        <p>
          Dozer supports full Class level mapping recursion. If you have any complex types defined as field level
          mappings in your object, Dozer will search the mappings file for a Class level mapping between the two
          Classes that you have mapped. If you do not have any mappings, it will only map fields that are of the
          same name between the complex types.
        </p>
      </subsection>
    </section>
  </body>
</document>