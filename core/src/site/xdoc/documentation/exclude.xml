<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2005-2017 Dozer Project

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>Excluding Fields</title>
    <author email="fgarsombke@yahoo.com">Franz Garsombke</author>
  </properties>
  <head>
    <title/>
    <meta http-equiv="CACHE-CONTROL" name="CACHE-CONTROL" content="NO-CACHE"/>
    <meta http-equiv="PRAGMA" name="PRAGMA" content="NO-CACHE"/>
    <meta http-equiv="EXPIRES" content="0"/>
  </head>
  <body>
    <section name="Excluding Fields">
      <p>
        Dozer supports excluding fields from a mapping using the field-exclude tag. We also support field excludes
        going one-way as shown in the example.
      </p>
      <source>
        <![CDATA[ 
<field-exclude> 
  <a>fieldToExclude</a> 
  <b>fieldToExclude</b> 
</field-exclude>           

<field-exclude type="one-way""> 
  <a>fieldToExclude</a> 
  <b>fieldToExclude</b> 
</field-exclude>           
            ]]>
      </source>

      <subsection name="Wildcard - excluding default field mappings">
        <p>
          There's also a flag (<code>wildcard</code>) set on class mapping which controls whether the default mapping
          (which applies to pair of properties of the same name)
          should be done. The default value is true. For example:
        </p>
        <source>
          <![CDATA[
<mapping wildcard="false">
    <class-a>org.dozer.vo.AnotherTestObject</class-a>
    <class-b>org.dozer.vo.AnotherTestObjectPrime</class-b>
    <field>
       <a>field1</a>
       <b>field1</b>
    </field>   
</mapping>
          ]]>
        </source>
      </subsection>

      <p>
        This configuration would cause only the fields
        <code>field1</code>
        in both classes to be mapped, even if both classes share a property
        with the same name called<code>field2</code>.
      </p>

      <subsection name="Exclude Mapping Null Values">
        <p>
          You can bypass the mapping of null values. If this is specified, the dest field mapping is bypassed at
          runtime and the destination value setter method will not be called if the src value is null. This can be
          specified at the mapping or class level. For example:
        </p>
        <source>
          <![CDATA[ 
<mapping map-null="false">
  <class-a>org.dozer.vo.AnotherTestObject</class-a>
  <class-b>org.dozer.vo.AnotherTestObjectPrime</class-b>    
  <field>
    <a>field4</a>
    <b>to.one</b>
  </field>
</mapping>   
          ]]>
        </source>
<p>OR...</p>
        <source>
          <![CDATA[ 
<mapping>
  <class-a>org.dozer.vo.AnotherTestObject</class-a>
  <class-b map-null="false">org.dozer.vo.AnotherTestObjectPrime
  </class-b>    
  <field>
    <a>field4</a>
    <b>to.one</b>
  </field>
</mapping>   
      ]]>
        </source>
        <p></p>
      </subsection>

      <subsection name="Exclude Mapping Empty Strings">
        <p>
          You can bypass the mapping of empty String values. If this is specified, the dest field mapping is
          bypassed at runtime and the destination value setter method will not be called if the src value is an
          empty String. This can be specified at the mapping or class level. For example:
        </p>
        <source>
          <![CDATA[ 
<mapping map-empty-string="false">
  <class-a>org.dozer.vo.AnotherTestObject</class-a>
  <class-b>org.dozer.vo.AnotherTestObjectPrime</class-b>    
  <field>
    <a>field4</a>
    <b>to.one</b>
  </field>
</mapping>   
          ]]>
        </source>
<p>OR...</p>
        <source>
          <![CDATA[ 
<mapping>
  <class-a>org.dozer.vo.AnotherTestObject</class-a>
  <class-b map-empty-string="false">
      org.dozer.vo.AnotherTestObjectPrime
  </class-b>    
  <field>
    <a>field4</a>
    <b>to.one</b>
  </field>
</mapping>   
      ]]>
        </source>
        <p></p>
      </subsection>


    </section>
  </body>
</document>