<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2005-2017 Dozer Project

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>Deep Property Mapping</title>
    <author email="fgarsombke@yahoo.com">Franz Garsombke</author>
  </properties>
  <head>
    <title/>
    <meta http-equiv="CACHE-CONTROL" name="CACHE-CONTROL" content="NO-CACHE"/>
    <meta http-equiv="PRAGMA" name="PRAGMA" content="NO-CACHE"/>
    <meta http-equiv="EXPIRES" content="0"/>
  </head>
  <body>
    <section name="Deep Property Mapping">
      <p>
        It is possible to map deep properties. An example would be when you have an object with a String property.
        Your other object has a String property but it is several levels deep within the object graph. In the
        example below the DestDeepObj has nested attributes within the object graph that need to be mapped. Type
        hints are supported for deep field mappings. The attributes copy-by-reference, type=one-way, and
        relationship-type can also be used.
      </p>
      <source>
        <![CDATA[ 
<mapping>
  <class-a>org.dozer.vo.deep.SrcDeepObj</class-a>
  <class-b>org.dozer.vo.deep.DestDeepObj</class-b>
    
  <field>
    <a>srcNestedObj.src1</a>
    <b>dest1</b>
  </field>

  <field>
    <a>srcNestedObj.src2</a>
    <b>dest2</b>
  </field>

  <field>
    <a>srcNestedObj.srcNestedObj2.src5</a>
    <b>dest5</b>
  </field>

  <field><!-- java.util.List to java.util.List -->
    <a>srcNestedObj.hintList</a>
    <b>hintList</b>
    <a-hint>java.lang.String</a-hint>         
    <b-hint>java.lang.Integer</b-hint> 
  </field>

  <field>
    <a>srcNestedObj.hintList2</a>
    <b>hintList2</b>
    <a-hint>org.dozer.vo.TheFirstSubClass</a-hint>
    <b-hint>org.dozer.vo.TheFirstSubClassPrime</b-hint> 
  </field>

  <field copy-by-reference="true">
    <a>srcNestedObj.hintList3</a>
    <b>hintList3</b>
  </field>

</mapping>  
            ]]>
      </source>
    </section>

    <section name="Deep Indexed Mapping">
      <p>Indexed mapping within deep mapping is supported.</p>
      <source>
        <![CDATA[ 
<field>
  <a>offSpringName</a>
  <b>pets[1].offSpring[2].petName</b>
</field>
            ]]>
      </source>
      <p>
        Destination Hints are NOT required if the indexed collection is an Array or if you are using jdk 1.5
        Generics. Dozer is able to automatically determine the property type for these use cases. But you will need
        to provide hints if the data types are not Arrays or if you are not using Generics. This is required so
        that Dozer knows what types of dest objects to create while it traverses the deep field mapping.
      </p>
      <p>The following is an example of using hints.....</p>
      <source>
        <![CDATA[ 
<field>
  <a>someField</a>
  <b>someList[1].someOtherList[0].someOtherField</b>
  <b-deep-index-hint>org.dozer.vo.TestObject, 
      org.dozer.vo.AnotherTestObject
  </b-deep-index-hint>      
</field>
             ]]>
      </source>
    </section>

  </body>
</document>
