<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2005-2017 Dozer Project

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>Custom Bean Factories and Custom Create Methods</title>
    <author email="fgarsombke@yahoo.com">Franz Garsombke</author>
  </properties>
  <head>
    <title/>
    <meta http-equiv="CACHE-CONTROL" name="CACHE-CONTROL" content="NO-CACHE"/>
    <meta http-equiv="PRAGMA" name="PRAGMA" content="NO-CACHE"/>
    <meta http-equiv="EXPIRES" content="0"/>
  </head>
  <body>
    <section name="Custom Bean Factories">

      <p>
        You can configure Dozer to use custom bean factories to create new instances of destination data objects
        during the mapping process. By default Dozer just creates a new instance of any destination objects using a
        default constructor. This is sufficient for most use cases, but if you need more flexibility you can
        specify your own bean factories to instantiate the data objects.
      </p>
      <p>
        Your custom bean factory must implement the org.dozer.BeanFactory interface. By default
        the Dozer mapping engine will use the destination object class name for the bean id when calling the
        factory.
      </p>
      <source>
        <![CDATA[ 
public interface BeanFactory {
  public Object createBean(Object source, Class sourceClass, 
      String targetBeanId);
}         
           ]]>
      </source>
      <p>
        Next, in your Dozer mapping file(s) you just need to specify a bean-factory xml attribute for any mappings
        that you want to use a custom factory.
      </p>
      <p>
        In the following example, the SampleCustomBeanFactory will be used to create any new instances of the
        InsideTestObjectPrime java bean data object.
      </p>
      <source>
        <![CDATA[ 
<mapping>
  <class-a>com.example.vo.InsideTestObject</class-a>
  <class-b bean-factory=
      "com.example.factories.SomeCustomBeanFactory">
    com.example.vo.InsideTestObjectPrime
  </class-b>
</mapping>  
         ]]>
      </source>
      <p>
        If your factory looks up beans based on a different id than class name, you can specifiy a factory-bean-id
        xml attribute. At runtime the specified factory-bean-id will be passed to the factory instead of class
        name.
      </p>
      <source>
        <![CDATA[ 
<mapping>
  <class-a>com.example.vo.InsideTestObject</class-a>
  <class-b bean-factory=
           "com.example.factories.SomeCustomBeanFactory"
           factory-bean-id="someBeanLookupId">
    com.example.vo.InsideTestObjectPrime
  </class-b>
</mapping>  
         ]]>
      </source>

      <subsection name="Specifying Default Factories">
        <p>
          Alternatively, bean factories can be specified in the default configuration section of any Dozer mapping
          file(s). The default factory would be used for any mappings in that file.
        </p>
        <source>
          <![CDATA[ 
<configuration>
  <stop-on-errors>true</stop-on-errors>
  <wildcard>true</wildcard>
  <bean-factory>com.example.factories.SomeDefaultBeanFactory
  </bean-factory>
</configuration>
         ]]>
        </source>
        <p>
          Bean factories can also be specified at the mapping level. The specified factory would be used for
          class-a and class-b.
        </p>
        <source>
          <![CDATA[ 
<mapping bean-factory=
         "com.example.factories.SomeCustomBeanFactory">
  <class-a>com.example.vo.TestObject</class-a>
  <class-b>com.example.vo.TestObjectPrime</class-b>
</mapping>
         ]]>
        </source>
      </subsection>
      <subsection name="Spring bean factory injection">
        <p>Bean factories can be injected via Spring or similar inversion of control techniques.</p>
        <source>
          <![CDATA[ 
<beans>
  <bean id="org.dozer.Mapper" class="org.dozer.DozerBeanMapper">
    <property name="mappingFiles">
      <list>
        <value>systempropertymapping1.xml</value>
        <value>dozerBeanMapping.xml</value>
      </list>
    </property>
    <property name="factories">
      <map>
        <!-- the key matches the name of the factory in the 
             dozerBeanMapping.xml file -->
       <entry key="org.dozer.factories.SampleCustomBeanFactory">
         <ref bean="sampleCustomBeanFactory"/>
       </entry>
        <!-- more factories can be supplied with additional 
             entry's -->
      </map>
    </property>    
  </bean>

  <bean id="sampleCustomBeanFactory" 
        class="org.dozer.factories.SampleCustomBeanFactory"/>
</beans>

]]>
        </source>
        <p>By defining your factories as Spring beans you can then inject them into the DozerBeanMapper class.</p>
      </subsection>
    </section>
  </body>
</document>