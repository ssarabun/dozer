<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2005-2017 Dozer Project

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>Usage</title>
    <author email="fgarsombke@yahoo.com">Franz Garsombke</author>
  </properties>
  <head>
    <title/>
    <meta http-equiv="CACHE-CONTROL" name="CACHE-CONTROL" content="NO-CACHE"/>
    <meta http-equiv="PRAGMA" name="PRAGMA" content="NO-CACHE"/>
    <meta http-equiv="EXPIRES" content="0"/>
  </head>
  <body>
    <section name="Getting Started">
      <subsection name="Downloading the Distribution">
      <ul>
        <li>
          Download
          <a href="http://sourceforge.net/project/showfiles.php?group_id=133517" target="_blank">Dozer</a>
          and extract the archive.
        </li>
        <li>Add dozer.jar to your classpath.</li>
        <li>
          Add
          <a href="../dependencies.html">required thirdparty runtime jars</a>
          to your classpath.
        </li>
      </ul>
          <p>If you are using Maven, simply copy-paste this dependency to your project.</p>
          <source>
<![CDATA[<dependency>
    <groupId>net.sf.dozer</groupId>
    <artifactId>dozer</artifactId>
    <version>5.4.0</version>
</dependency>]]>
          </source>

        <p>Apache Ivy users can copy-paste the following line instead.</p>
        <source>
<![CDATA[<dependency org="net.sf.dozer" name="dozer" rev="5.4.0"/>]]>
        </source>
      <br/>
      </subsection>
            
      <subsection name="1st Mapping">
        <p>For your first mapping lets assume that the two data objects share all common attribute names.</p>
        <source>
          <![CDATA[ 
Mapper mapper = new DozerBeanMapper();
DestinationObject destObject =  
    mapper.map(sourceObject, DestinationObject.class);]]>
        </source>
        <p>
          After performing the Dozer mapping, the result will be a new instance of the destination object that
          contains values for all fields that have the same field name as the source object. If any of the mapped
          attributes are of different data types, the Dozer mapping engine will automatically perform data type
          conversion. At this point you have completed your first Dozer mapping. Later sections will go over how to
          specify custom mappings via custom xml files.
        </p>
        <p>
          <b>IMPORTANT:</b>
          For real-world applications it is NOT recommended to create a new instance of the Mapper each time
          you map objects. Typically a system will only have one DozerBeanMapper instance per VM. If you are not
          using an IOC framework where you can define the Mapper Instance as singleton="true". If needed, a
          DozerBeanMapperSingletonWrapper convenience class has been provided in the Dozer jar.
        </p>
      </subsection>

      <br/>
      <subsection name="Specifying Custom Mappings via XML">
        <p>
          If the two different types of data objects that you are mapping contain any fields that don't share a
          common property name, you will need to add a class mapping entry to your custom mapping xml file. These
          mappings xml files are used at runtime by the Dozer mapping engine.
        </p>
        <p>
          Dozer automatically performs any type conversion when copying the source field data to the destination
          field. The Dozer mapping engine is bi-directional, so if you wanted to map the destination object to the
          source object, you do not need to add another class mapping to the xml file.
        </p>
        <p>
          <b>IMPORTANT:</b>
          Fields that are of the same name do not need to be specified in the mapping xml file. Dozer automatically
          maps all fields with the same property name from the source object into the destination object.
        </p>
        <source>
          <![CDATA[ 
<mapping>
  <class-a>yourpackage.yourSourceClassName</class-a>
  <class-b>yourpackage.yourDestinationClassName</class-b>
    <field>
      <a>yourSourceFieldName</a>
      <b>yourDestinationFieldName</b>
    </field>
</mapping> ]]>
        </source>
        <p>
          The complete Dozer mapping xml file would look like the following. The
          <a href="./mappings.html">Custom Mappings</a>
          section contains more information on mapping options that are available to you for more complex use
          cases.
        </p>
        <source>
          <![CDATA[ 
<?xml version="1.0" encoding="UTF-8"?>
<mappings xmlns="http://dozer.sourceforge.net"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://dozer.sourceforge.net
          http://dozer.sourceforge.net/schema/beanmapping.xsd">

  <configuration>
    <stop-on-errors>true</stop-on-errors>
    <date-format>MM/dd/yyyy HH:mm</date-format>
    <wildcard>true</wildcard>
  </configuration>

  <mapping>
    <class-a>yourpackage.yourSourceClassName</class-a>
    <class-b>yourpackage.yourDestinationClassName</class-b>
      <field>
        <A>yourSourceFieldName</A>
        <B>yourDestinationFieldName</B>
      </field>
  </mapping> 
            
  other custom class mappings would go here.......   
                   
</mappings>  ]]>
        </source>
      </subsection>

      <br/>

     <subsection name="Dozer and Dependency Injection Frameworks">
         <p>
         Dozer is not dependant of any existing Dependency Injection framework (DI). However the
             general aim is to support the most typical use cases with ready-to-use Wrappers.
         Check <a href="springintegration.html">Spring Integration</a> manual for option of initializing
             Dozer in context of Spring DI framework.
         </p>
     </subsection>

    </section>
  </body>
</document>