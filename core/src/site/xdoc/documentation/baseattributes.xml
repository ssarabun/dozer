<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2005-2017 Dozer Project

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>Inheritance Mapping</title>
    <author email="fgarsombke@yahoo.com">Franz Garsombke</author>
  </properties>
  <head>
    <title/>
    <meta http-equiv="CACHE-CONTROL" name="CACHE-CONTROL" content="NO-CACHE"/>
    <meta http-equiv="PRAGMA" name="PRAGMA" content="NO-CACHE"/>
    <meta http-equiv="EXPIRES" content="0"/>
  </head>
  <body>
    <section name="Inheritance Mapping">
      <subsection name="Reducing Mapping XML when using base class attributes">
        <p>
          <b>
            Properties that are of the same name do not need to be specified in the mapping xml file unless hints
            are needed.
          </b>
        </p>

        <p>
          If you are mapping subclasses that also have have base class attributes requiring mapping XML, you might
          be inclined to reproduce base class field maps in each subclass mapping element, like the following
          example:
        </p>
        <source>
          <![CDATA[ 
<mapping>
  <class-a>org.dozer.vo.SubClass</class-a>
  <class-b>org.dozer.vo.SubClassPrime</class-b>
    
  <field>
    <!-- this is the same for all sub classes -->
    <a>superAttribute</a> 
    <b>superAttr</b>
  </field>
    
  <field>
    <a>attribute2</a>
    <b>attributePrime2</b>
  </field>
</mapping>
 
<mapping>
 <class-a>org.dozer.vo.SubClass2</class-a>
 <class-b>org.dozer.vo.SubClassPrime2</class-b>
     
 <field>
   <!-- this is the same for all sub classes -->
   <a>superAttribute</a> 
   <b>superAttr</b>
 </field>
     
 <field>
   <a>attribute2</a>
   <b>attributePrime2</b>
 </field>
</mapping>
              ]]>
        </source>
        <p>
          In the previous mapping, some of the fields were from a common base class, but you had to reproduce them
          into each mapping of the sub classes.
        </p>
        <p>
          However, a better way to do it would be to map the base class individually. This can be done for each
          base class (in the case of a larger heirarchy). Assuming the base class name, below is the refactored
          mapping xml:
        </p>

        <source>
          <![CDATA[ 
<mapping>
  <class-a>org.dozer.vo.SuperClass</class-a>
  <class-b>org.dozer.vo.SuperClassPrime</class-b>
    
  <field>
    <a>superAttribute</a>
    <b>superAttr</b>
  </field>
</mapping>  

<mapping>
  <class-a>org.dozer.vo.SubClass</class-a>
  <class-b>org.dozer.vo.SubClassPrime</class-b>
    
  <field>
    <a>attribute</a>
    <b>attributePrime</b>
  </field>
</mapping>
  
<mapping>
  <class-a>org.dozer.vo.SubClass2</class-a>
  <class-b>org.dozer.vo.SubClassPrime2</class-b>
     
  <field>
    <a>attribute2</a>
    <b>attributePrime2</b>
  </field>
</mapping>
              ]]>
        </source>
        <p>
          The following images explain some of the different scenarios dozer handles. Each diagram shows two mapped
          class hierarchies and existing relations, which Dozer recognizes and maps.
        </p>
        <p>
          <img alt="scenario1" src="../images/scenario1.jpg"/>
        </p>
        <p>Scenario 1 shows that if you map SubClass to ClassPrime all attributes from SuperClass -> ClassPrime will be
          mapped as well.
        </p>
        <p>
          <img alt="scenario2" src="../images/scenario2.jpg"/>
        </p>
        <p>Scenario 2 shows that Dozer has no limitations on the inheritance depth it analyzes to find parent
          mappings.
        </p>
        <p>
          <img alt="scenario3" src="../images/scenario3.jpg"/>
        </p>
        <p>
          Scenario 3 shows that it is possible to map two collections with different subctypes of the same parent type.
          This is done by providing hints to the collection mapping, describing all potential subclasses.
        </p>
        <source>
          <![CDATA[
<field>
  <a>aList</a>
  <b>bList</b>
  <a-hint>B1,B2</a-hint>
  <b-hint>BPrime1,BPrime2</b-hint>
</field>
              ]]>
        </source>
      </subsection>
    </section>
  </body>
</document>