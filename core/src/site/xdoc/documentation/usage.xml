<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2005-2017 Dozer Project

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>Usage</title>
    <author email="fgarsombke@yahoo.com">Franz Garsombke</author>
  </properties>
  <head>
    <title/>
    <meta http-equiv="CACHE-CONTROL" name="CACHE-CONTROL" content="NO-CACHE"/>
    <meta http-equiv="PRAGMA" name="PRAGMA" content="NO-CACHE"/>
    <meta http-equiv="EXPIRES" content="0"/>
  </head>
  <body>
    <section name="General Usage">
      <p>
        Requirements for running Dozer:
      </p>
      <ul>
        <li>Dozer uses SLF4J for logging purposes.</li>
        <li>Dozer needs a few third-party runtime jars.</li>
        <li>
          All of the
          <a href="../dependencies.html">required runtime jars</a>
          are in the {dozer.home}/repository directory and need to be in your Classpath
        </li>
        <li>The dozer.jar file in the {dozer.home}/dist directory needs to be in your Classpath</li>
      </ul>
      <subsection name="Dozer Bean Mapper">
        <p>
          Before we go over setting up custom xml bean mappings, let us look at a simple example of using Dozer. The
          Dozer mapping implementation has a method called map which takes a source object and either a destination
          object or destination object class type. After mapping the two objects it then returns the destination
          object with all of its mapped fields.
        </p>
        <source>
          <![CDATA[
Mapper mapper = new DozerBeanMapper();

DestinationObject destObject = 
    mapper.map(sourceObject, DestinationObject.class);
             or
DestinationObject destObject = new DestinationObject();
mapper.map(sourceObject, destObject);
          ]]>
        </source>

        <p>
          <b>IMPORTANT:</b>
          For real-world applications it is not recommended that you create a new instance of the Mapper each time
          you map objects. Typically a system will only have one DozerBeanMapper instance per VM. If you are not
          using an IOC framework where you can define the Mapper as singleton="true", a
          DozerBeanMapperSingletonWrapper convenience class has been provided in the Dozer jar.
        </p>

        <p>Dozer operates in two general modes: implicit and explicit. Implicit mode is activated by default and
        tries to resolve mappings for you. It uses simple assumptions that if two objects are passed for mapping
        then bean properties with the same names should be mapped. If there are additional mappings needed,
        which can not be derived by the naming you should add those either via Xml, Annotations or API.</p>

        <p>
          Explicit mode assumes that no mappings should be performed or "guessed" until you have specified those
          specifically. The amount of coding is higher in explicit mode, but sometimes you would like to have full
          control on what is going on during the mappings process and this approach is also used in many of the
          productive applications. Implicit/Explicit mapping switch is called <i>"wildcard"</i> in Dozer. Whenever you
          encounter that in configuration you know what behavior to expect from now on.
        </p>

      </subsection>
      <subsection name="Injecting Custom Mapping Files">
        <p>
          The Dozer mapping xml file(s) define any custom mappings that can't be automatically performed by the
          Dozer mapping engine. Any custom Dozer mapping files need to be injected into the Mapper
          implementation(org.dozer.DozerBeanMapper). Both setter-based and constructor-based
          injection are supported.
        </p>
        <p>
          Preferably, you will be using an IOC framework such as Spring for these Dozer injection requirements.
          Alternatively, the injection of mapping files can be done programmatically. Below is a programmatic
          approach to creating a bean mapper. Note that this is
          <b>NOT the recommended way to retrieve the bean mapper</b>
          . Each new instance needs to be initialized and this consumes time as well as resources. If you are using
          the mapper this way just wrap it using the singleton pattern.
          <br/>
          <source>
            <![CDATA[ 
List myMappingFiles = new ArrayList();
myMappingFiles.add("dozerBeanMapping.xml");
myMappingFiles.add("someOtherDozerBeanMappings.xml");
DozerBeanMapper mapper = new DozerBeanMapper();
mapper.setMappingFiles(myMappingFiles);
DestinationObject destObject = 
    mapper.map(sourceObject, DestinationObject.class);
          ]]>
          </source>
          <b>IMPORTANT:</b>
          Mapper instance(s) should be setup as a Singleton regardless of how you choose to inject the Mapper
          instance(s). You should configure the Mapper this way so that you do not have to reload and reinitialize
          the mapping files for each individual mapping during the lifecycle of your app. Reinitializing the
          mapping files for each mapping would be inefficient and unnecessary. The DozerBeanMapper.java class is
          thread safe.
        </p>
      </subsection>
      <subsection name="Spring Integration">
        <p>
          The following is an example how the Mapper bean would be configured via Spring.
          <br/>
          Sample spring.xml bean definition...

          <source>
            <![CDATA[ 
<bean id="mapper" class="org.dozer.DozerBeanMapper">
  <property name="mappingFiles">
    <list>
      <value>dozer-global-configuration.xml</value>			   
      <value>dozer-bean-mappings.xml</value>
      <value>more-dozer-bean-mappings.xml</value>
    </list>
  </property>
</bean>
          ]]>
          </source>

          <br/>
        </p>

      </subsection>

      <subsection name="Dozer Bean Mapper Singleton Wrapper">
        <p>
          There is one way to configure the DozerBeanMapperSingletonWrapper to use your custom mapping file.
        </p>
        <ul>
          <li>
            <b>Using one mapping file:</b>
            A file called dozerBeanMapping.xml file will be loaded if it is in your Classpath. You can find a
            sample of this file in the {dozer.home}/mappings directory.
          </li>
        </ul>

        <p>
          The mapping file defines all of the relationships between Java classes and their attributes. The
          <a href="./mappings.html">Custom Mappings</a>
          section details the custom XML mapping options that are available.
        </p>
        <p>
          The following example show how to use the DozerBeanMapperSingletonWrapper. Dozer has a method called map
          which takes a source object and either a destination object or destination object class type. After
          mapping the two objects it then returns the destination object with all of its mapped fields.
        </p>
        <source>
Mapper mapper = DozerBeanMapperSingletonWrapper.getInstance();
DestinationObject destObject = 
    mapper.map(sourceObject, DestinationObject.class);

or

Mapper mapper = DozerBeanMapperSingletonWrapper.getInstance();
DestinationObject destObject = new DestinationObject();
mapper.map(sourceObject, destObject);
        </source>
      </subsection>
    </section>
  </body>
</document>