<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2005-2017 Dozer Project

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>Annotation Mappings</title>
    <author email="buzdin@gmail.com">Dmitry Buzdin</author>
  </properties>
  <head>
    <title/>
    <meta http-equiv="CACHE-CONTROL" name="CACHE-CONTROL" content="NO-CACHE"/>
    <meta http-equiv="PRAGMA" name="PRAGMA" content="NO-CACHE"/>
    <meta http-equiv="EXPIRES" content="0"/>
  </head>
  <body>
    <section name="Annotation Mappings">

      <subsection name="Why Annotations?">
        <p>
          One of the downsides of using Dozer for the long time was Xml. Since Dozer started during Xml-hype years more
          than five years ago that was pretty obvious choice back then. After that Java 5 brought us annotations and new
          industry accepted style of configuring behaviour are Domain-Specific Languages. DSL-like support is provided
          in form of mapping API, but since version 5.3.2 Dozer starts providing annotations support as well.
        </p>
        <p>
          The obvious reasons to use annotations is to avoid duplicating field and method names in your mapping code.
          The annotation can be put onto the mapped property itself thus reducing the amount of code. However there are
          cases when annotations should be avoided or even impossible to use. Some of them are the following:
        </p>
        <ul>
          <li>You are mapping classes, which are not under your control, but provided in libraries;</li>
          <li>The mappings are quite complex and require many configurations;</li>
        </ul>
        <p>
          In the first case you could be mapping JAXB generated entities or third-party DTOs and have no possibility
          to put annotations. In the second case there is a choice of putting lots of multi-line annotations or isolating
          the mapping code with certain duplication of entity names. Overannotated beans could be problematic to read and
          understand.
        </p>
      </subsection>

      <subsection name="Usage">
        <p>
          <b>WARNING:</b> Annotation support in Dozer is experimental and does not cover complex use cases yet.
        However it may be useful to implement that simplest mappings you have had to do in Xml or API before.
        </p>
        <p>
          The idea is very simple. You put @Mapping annotation either on getter of field directly. If Dozer finds that it
          adds a bi-directional mapping. It means that putting annotation once will create mappings for both conversion
          types. Type conversions (e.g. String-Long) will be chosen automatically. Global custom converters are
          resolved as well. Annotations work only if a conversion is subject to wildcard rule (active by default).
          The following example demonstrates annotations in action.
        </p>
      <source><![CDATA[
public class SourceBean {

    private Long id;

    private String name;

    @Mapping("binaryData")
    private String data;

    @Mapping("pk")
    public Long getId() {
        return this.id;
    }

    public String getName() {
        return this.name;
    }
}              ]]></source>

      <source><![CDATA[
public class TargetBean {

    private String pk;

    private String name;

    private String binaryData;

    public void setPk(String pk) {
        this.pk = pk;
    }

    public void setName(String name) {
        this.name = name;
    }
}              ]]></source>
      <p>
        Mapping the given beans with Dozer will result in all three fields being mapped. Property "name" will be mapped
        by naming convention. Property "id" will be transformed to "pk". Field "data" will be moved to "binaryData".
        Do not worry about <i>private</i> modifier; it will be handled automatically.
      </p>
      <p>
        Currently Dozer offers only one annotation, but the next ones will be added in following releases. As for now
        you can mix and match all flavours of mapping types to achieve the desired effect: Xml, API and Annotations.
      </p>
      </subsection>

    </section>
  </body>
</document>