<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2005-2017 Dozer Project

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>mapping classes</title>
    <author email="fgarsombke@yahoo.com">Franz Garsombke</author>
  </properties>
  <head>
    <title/>
    <meta http-equiv="CACHE-CONTROL" name="CACHE-CONTROL" content="NO-CACHE"/>
    <meta http-equiv="PRAGMA" name="PRAGMA" content="NO-CACHE"/>
    <meta http-equiv="EXPIRES" content="0"/>
  </head>
  <body>
    <section name="Mapping Classes">
      <p>
        An example of mapping two classes is defined below. Note: Explicit xml mapping for 2 classes is not
        required if all the field mapping between src and dest object can be performed by matching on attribute
        name. Custom xml class mapping is only required when you need to specify any custom field mappings.
      </p>
      <source>
        <![CDATA[ 
<mappings>          
  <mapping>
    <class-a>org.dozer.vo.TestObject</class-a>
    <class-b>org.dozer.vo.TestObjectPrime</class-b>
    <!-- Any custom field mapping xml would go here -->
  </mapping>
</mappings>
        ]]>
      </source>
      <p>
        These mappings are bi-directional so you would never need to define an XML map for TestObjectPrime to
        TestObject. If these two classes had references to complex types that needed type transformation, you would
        also define them as mappings. Dozer recursively goes through an object and maps everything in it. Data type
        conversion is performed automatically. Dozer also supports no attribute mappings at all. If supplied two
        classes that are not mapped, it simply tries to map properties that are the same name.
      </p>
    </section>
  </body>
</document>